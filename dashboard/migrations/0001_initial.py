# Generated by Django 5.2.7 on 2025-10-04 09:20

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AdminSettings',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('pulses_are_being_blocked', models.BooleanField(default=False)),
                ('borrow_from_aave', models.BooleanField(default=False)),
                ('alarms', models.BooleanField(default=True)),
                ('interval', models.IntegerField(default=5, help_text='pulses interval in seconds')),
                ('tx_tries', models.IntegerField(default=2, help_text='how many times a uniswap swap will repeat at max (in case of a failure)')),
                ('secure_profit_ratio', models.FloatField(default=0.7, help_text='this is used to improve stop loss in case a profit take price is reached')),
                ('max_sane_gas_price', models.FloatField(default=4.0, help_text='maximum gas price under which all tx are allowed to execute')),
                ('gas_speed', models.CharField(choices=[('FastGasPrice', 'FastGasPrice'), ('ProposeGasPrice', 'ProposeGasPrice'), ('SafeGasPrice', 'SafeGasPrice')], default='FastGasPrice')),
                ('fiat_coin', models.CharField(choices=[('usdc', 'usdc')], default='usdc')),
                ('aave_borrow_to_collateral_added_safety_ratio', models.FloatField(default=0.9, help_text="a safety margin to make sure we won't borrow all of the borrow amount")),
                ('aave_info_update_pulse_steps', models.IntegerField(default=10, help_text='this is how many pulses to skip until the next update of aave user account data')),
                ('pulse_counter', models.BigIntegerField(default=0, help_text='this is used to keep track of updating the aave user data')),
                ('aave_user_account_data', models.JSONField(default=dict, help_text='results from aave contract method for user data is stored here')),
                ('balances', models.JSONField(blank=True, default=dict, null=True)),
                ('uniswap_asm_fiat_to_token', models.FloatField(default=3)),
                ('uniswap_asm_token_to_fiat', models.FloatField(default=3)),
                ('prices', models.JSONField(blank=True, default=dict, null=True)),
                ('gas', models.JSONField(blank=True, default=dict, null=True)),
                ('prices_update_epoch', models.BigIntegerField(default=0)),
                ('gas_update_epoch', models.BigIntegerField(default=0)),
                ('gas_update_epoch_max_allowed_delay_seconds', models.IntegerField(default=10)),
                ('depth_filtering_active', models.BooleanField(default=True)),
                ('depth_show_cumulative', models.BooleanField(default=False)),
                ('depth_lowest_price', models.FloatField(default=4200)),
                ('depth_highest_price', models.FloatField(default=4400)),
                ('depth_cluster_width_usd', models.FloatField(default=1)),
            ],
        ),
        migrations.CreateModel(
            name='Alert',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('uuid', models.TextField(blank=True, default='', null=True)),
                ('alert_type', models.CharField(choices=[('price_goes_above', 'price_goes_above'), ('price_goes_below', 'price_goes_below')], default='price_goes_above')),
                ('alert_price', models.FloatField(default=0)),
                ('epoch_created', models.BigIntegerField(default=0)),
                ('executed', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.TextField(blank=True, default='', null=True)),
                ('coin', models.CharField(choices=[('weth', 'weth')], default='weth')),
                ('entry_condition', models.CharField(choices=[('execute_if_price_is_above', 'execute_if_price_is_above'), ('execute_if_price_is_below', 'execute_if_price_is_below')], default='auto_exit_style_both_ways')),
                ('position_type', models.CharField(choices=[('short', 'short'), ('long', 'long')], default='long')),
                ('entry_capital', models.FloatField(default=0)),
                ('order_entry_price', models.FloatField(default=0)),
                ('profit_take_price', models.FloatField(default=0)),
                ('stop_loss_price', models.FloatField(default=0)),
                ('pair_uuid', models.TextField(blank=True, default='', null=True)),
                ('uuid', models.TextField(blank=True, default='', null=True)),
                ('active', models.BooleanField(default=True)),
                ('executed', models.BooleanField(default=False)),
                ('archived', models.BooleanField(default=False)),
                ('fulfilled', models.BooleanField(default=False)),
                ('epoch_created', models.BigIntegerField(default=0)),
                ('epoch_updated', models.BigIntegerField(default=0)),
                ('epoch_executed', models.BigIntegerField(default=0)),
                ('auto_exit_style', models.CharField(choices=[('auto_exit_style_both_ways', 'auto_exit_style_both_ways'), ('auto_exit_style_only_after_profit_take_price_reached', 'auto_exit_style_only_after_profit_take_price_reached'), ('auto_exit_style_only_after_stop_loss_price_reached', 'auto_exit_style_only_after_stop_loss_price_reached'), ('auto_exit_style_never', 'auto_exit_style_never')], default='auto_exit_style_only_after_profit_take_price_reached')),
            ],
        ),
        migrations.CreateModel(
            name='Tick',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('epoch', models.BigIntegerField(default=0, unique=True)),
                ('price', models.FloatField(default=0)),
                ('indicator_ema_minutely_20', models.FloatField(default=0)),
                ('indicator_ema_minutely_50', models.FloatField(default=0)),
                ('indicator_ema_minutely_200', models.FloatField(default=0)),
                ('indicator_ema_hourly_20', models.FloatField(default=0)),
                ('indicator_ema_hourly_50', models.FloatField(default=0)),
                ('indicator_ema_hourly_200', models.FloatField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Position',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('coin_amount_long', models.FloatField(default=0)),
                ('coin_amount_borrowed_to_enter_short', models.FloatField(default=0)),
                ('fiat_amount_received_to_sell_and_enter_short', models.FloatField(default=0)),
                ('fiat_amount_spent_to_buy_and_exit_short', models.FloatField(default=0)),
                ('entry_price', models.FloatField(default=0)),
                ('profit_take_price', models.FloatField(default=0)),
                ('stop_loss_price', models.FloatField(default=0)),
                ('initial_stop_loss_price', models.FloatField(default=0)),
                ('uuid', models.TextField(blank=True, default='', null=True)),
                ('active', models.BooleanField(default=True)),
                ('state', models.CharField(choices=[('in_loss', 'in_loss'), ('reaching_profit_take_price', 'reaching_profit_take_price'), ('post_profit_take_price', 'post_profit_take_price'), ('exited_in_loss', 'exited_in_loss'), ('exited_in_profit', 'exited_in_profit')], default='reaching_profit_take_price')),
                ('exit_price', models.FloatField(default=0)),
                ('stop_loss_price_improved', models.BooleanField(default=False)),
                ('is_long', models.BooleanField(default=False)),
                ('profit_amount_at_profit_take_price', models.FloatField(default=0)),
                ('loss_amount_at_stop_loss_price', models.FloatField(default=0)),
                ('ambition_ratio', models.FloatField(default=0)),
                ('price', models.FloatField(default=0)),
                ('value', models.FloatField(blank=True, default=0, null=True)),
                ('growth_usd', models.FloatField(blank=True, default=0, null=True)),
                ('final_profit_usd', models.FloatField(default=0)),
                ('growth_percentage_from_entry_price', models.FloatField(blank=True, default=0, null=True)),
                ('epoch_created', models.BigIntegerField(default=0)),
                ('epoch_updated', models.BigIntegerField(default=0)),
                ('epoch_closed', models.BigIntegerField(default=0)),
                ('display_on_chart', models.BooleanField(default=False)),
                ('auto_exit_style', models.CharField(choices=[('auto_exit_style_both_ways', 'auto_exit_style_both_ways'), ('auto_exit_style_only_after_profit_take_price_reached', 'auto_exit_style_only_after_profit_take_price_reached'), ('auto_exit_style_only_after_stop_loss_price_reached', 'auto_exit_style_only_after_stop_loss_price_reached'), ('auto_exit_style_never', 'auto_exit_style_never')], default='auto_exit_style_both_ways')),
                ('archived', models.BooleanField(default=False)),
                ('exited_gracefully', models.BooleanField(default=False)),
                ('order', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='dashboard.order')),
            ],
        ),
        migrations.CreateModel(
            name='Pair',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('uuid', models.TextField(blank=True, default='', null=True)),
                ('epoch_created', models.BigIntegerField(default=0)),
                ('long_position', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='long_position', to='dashboard.position')),
                ('short_position', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='short_position', to='dashboard.position')),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('uuid', models.TextField(blank=True, default='', null=True)),
                ('event_type', models.CharField(choices=[('stop_loss_price_improved', 'stop_loss_price_improved'), ('stop_loss_price_occured_but_auto_exit_is_off', 'stop_loss_price_occured_but_auto_exit_is_off'), ('exited', 'exited'), ('transaction_failed', 'transaction_failed')], default='stop_loss_price_improved')),
                ('needs_notification', models.BooleanField(default=False)),
                ('description', models.TextField(default='')),
                ('epoch_created', models.BigIntegerField(default=0)),
                ('position', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='dashboard.position')),
            ],
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('transaction_type', models.CharField(choices=[('uniswap_approve', 'uniswap_approve'), ('uniswap_token_to_fiat', 'uniswap_token_to_fiat'), ('uniswap_fiat_to_token', 'uniswap_fiat_to_token'), ('uniswap_wrap_eth', 'uniswap_wrap_eth'), ('uniswap_unwrap_weth', 'uniswap_unwrap_weth'), ('sushiswap_token_to_fiat', 'sushiswap_token_to_fiat'), ('sushiswap_fiat_to_token', 'sushiswap_fiat_to_token'), ('aave_approve', 'aave_approve'), ('aave_supply', 'aave_supply'), ('aave_withdraw', 'aave_withdraw'), ('aave_borrow', 'aave_borrow'), ('aave_repay', 'aave_repay'), ('arbi_balance', 'arbi_balance'), ('arbi_action_2', 'arbi_action_2'), ('arbi_approve', 'arbi_approve'), ('arbi_allowance', 'arbi_allowance'), ('arbi_deposit', 'arbi_deposit'), ('arbi_withdraw', 'arbi_withdraw'), ('arbi_wrap_eth', 'arbi_wrap_eth'), ('arbi_unwrap_weth', 'arbi_unwrap_weth'), ('arbi_single_swap', 'arbi_single_swap')], default='uniswap_token_to_fiat')),
                ('state', models.CharField(choices=[('transaction_state_ongoing', 'transaction_state_ongoing'), ('transaction_state_failed', 'transaction_state_failed'), ('transaction_state_successful', 'transaction_state_successful')], default='transaction_state_ongoing')),
                ('coin', models.CharField(choices=[('weth', 'weth')], default='weth')),
                ('fiat_amount_spent', models.FloatField(default=0)),
                ('token_amount_received', models.FloatField(default=0)),
                ('token_amount_spent', models.FloatField(default=0)),
                ('fiat_amount_received', models.FloatField(default=0)),
                ('token_nominal_price', models.FloatField(default=0)),
                ('token_effective_price', models.FloatField(default=0)),
                ('slippage', models.FloatField(default=0)),
                ('hash', models.TextField(blank=True, default='', null=True)),
                ('fee', models.FloatField(default=0)),
                ('fiat_loan_amount', models.FloatField(default=0)),
                ('uuid', models.TextField(blank=True, default='', null=True)),
                ('name', models.TextField(blank=True, default='', null=True)),
                ('epoch_created', models.BigIntegerField(default=0)),
                ('epoch_updated', models.BigIntegerField(default=0)),
                ('order', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='dashboard.order')),
            ],
        ),
    ]
